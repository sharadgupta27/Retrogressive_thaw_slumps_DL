#the parameter file for classification of landforms using Deep Learning

##############################################################
## working folder and other directory setting

# working directory (current folder)
working_root = ./

##############################################################
## setting for CLIP classification

# clip_prompt = "This is an aerial image of a {}."
clip_prompt = "This is an satellite image of a {}."

# save a file to somewhere? we can use the same label list for many areas
# class_labels = ~/Data/tmp_data/test_segmentAnything/label_list.txt
class_labels = ~/Data/image_classification/UCMerced_LandUse/label_list.txt

# how many processes for getting sub-images, splitting sub-images and data augmentation, data loading in pytorch
# don't set this too large because it has a lot IO operation
process_num = 8

#buffer size for extending the polygon, in the XY projection, normally, it is based on meters
train_buffer_size = 10
inf_buffer_size = 200

# if this is set, then will extract the centroid of each polygon, buffer (the following value+ train/inf_buffer size above), making each sub-imaga have the same width and height, good for image classification
each_image_equal_size = 500

#whether use the rectangular extent of the polygon, set "--rectangle" on right if Yes, or omit it if NO
b_use_rectangle = --rectangle

# after extracting sub-images based, check image qualify (valid_per > 60 and entropy >= 0.5)
b_check_sub_image_quality = Yes

#the nodata in output images, for sentinel, set dst_nodata as 0
dst_nodata = 0

##############################################################
## deep learning setting
expr_name = exp1
# network setting files
network_setting_ini = model_clip.ini

##############################################################
## setting for classification (training)
# get training data from study areas, for multiple areas, separate them by using comma (,)
# training_regions = area_willow_river_focus.ini
training_regions = ucm_data.ini

# if human-input training data available, then run a few shot training, else, run zero-shot training
#a_few_shot_training = NO
a_few_shot_training = Yes

a_few_shot_samp_count = 600



##############################################################
## setting for classification (prediction)

# study areas for inference (prediction), for multiple areas, seperate them by using comma (,)
inference_regions = area_willow_river_focus.ini
#inference_regions = ucm_data.ini

# output folder for inference results
inf_output_dir = results

# indicate weather to use multiple available GPUs or only use one GPU (CPU)
# CUDA_VISIBLE_DEVICES does not work in python script (torch already be imported), so set to Yes don't work
b_use_multiGPUs = NO

# maximum simultaneous jobs for prediction (although there is enough GPU memory, but may don't have enough CPU memory for loading data)
maximum_prediction_jobs = 2

# the batch size for prediction
inf_batch_size = 128

# yes to remove extracted after precition, releasing disk space
b_rm_extracted_subImage = Yes

##############################################################
### Post processing and evaluation Parameters

# classes ids for checking, for multiple, use , to seperate, e.g. 10,1,5
class_ids_for_manu_check = 1
sample_num_per_class = 300

# Yes, to merge results from multiple regions (a large region that were divided into many small one using ./divide_to_small_region_ini.py)
b_merge_results_from_regions = Yes

##############################################################
